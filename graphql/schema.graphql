type User {
  _id: ID!
  name: String!
  email: String!
  password: String
  status: String!
  posts: [Post!]!
}

type Post {
  _id: ID!
  itemUniqueID: Number!
  itemAddress: String!
  itemGeoLocation: [Number!]!
  itemType: String
  itemDeposit: Number
  itemMonthly: Number
  itemJense: Number
  itemSale: Number
  itemManagement: Number
  itemAreaLand: Number
  itemAreaBuilding: Number
  itemFloor: Number
  itemPurpose: String
  itemRooms: String
  itemStatus: String
  itemField: String
  itemMovein: String
  itemApproval: String
  itemSubway: String
  itemTitleimg: String
  itemDetailimg: [String]
  itemTag: [String]
  itemElectricity: Number
  itemOption: [String]
  creator: User
  createdAt: String
  updatedAt: String
}

type AuthData {
  token: String!
  userId: String!
}

type PostData {
  posts: [Post!]!
  totalPosts: Int!
}

input UserInputData {
  email: String!
  name: String!
  password: String!
}

input PostInputData {
  itemUniqueID: Number!
  itemAddress: String!
  itemGeoLocation: [Number!]!
  itemType: String!
  itemDeposit: Number
  itemMonthly: Number
  itemJense: Number
  itemSale: Number
  itemManagement: Number
  itemAreaLand: Number
  itemAreaBuilding: Number
  itemFloor: Number
  itemPurpose: String
  itemRooms: String
  itemStatus: String
  itemField: String
  itemMovein: String
  itemApproval: String
  itemSubway: String
  itemTitleimg: String
  itemDetailimg: [String]
  itemTag: [String]
  itemElectricity: Number
  itemOption: [String]
}

type testdata {
  name: String!
  age: Int
  lat: Float
}

type Query {
  test(testing: String!): testdata!
  login(email: String!, password: String!): AuthData!
  posts(page: Int): PostData!
  post(id: ID!): Post!
}

type Mutation {
  createUser(userInput: UserInputData): User!
  createPost(postInput: PostInputData): Post!
  updatePost(id: ID!, postInput: PostInputData): Post!
  deletePost(id: ID!): Boolean
  updateStatus(status: String!): User!
}
